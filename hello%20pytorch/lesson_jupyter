{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "05.Autograd.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1bi9cbkefe4_Fa_pHX87vaCi0o8H9cB-i",
      "authorship_tag": "ABX9TyP6fteYBPY2MzkLeN4+2rv3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/wanpingDou/Pytorch-Camp/blob/master/hello%2520pytorch/lesson_jupyter\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SYdLkPemfHr4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "# @file name  : lesson-05-autograd.py\n",
        "# @author     : TingsongYu https://github.com/TingsongYu\n",
        "# @date       : 2019-08-30 10:08:00\n",
        "# @brief      : torch.autograd\n",
        "\"\"\"\n",
        "import torch\n",
        "torch.manual_seed(10)\n",
        "flag = True"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2Nf1BwbFhRcO",
        "colab_type": "text"
      },
      "source": [
        "## 1. retain_graph\n",
        "\n",
        "调用 backward 可以进行一次自动求导，如果我们再调用一次 backward，会发现程序报错，没有办法再做一次。\n",
        "\n",
        "因为 PyTorch 默认一次自动求导之后，计算图就被丢弃，所以多次自动求导需要设置`retain_graph=True`。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wzpaMoUyg98j",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "outputId": "0c1aaa02-7a9e-4814-f3c5-e3a2de9ec63d"
      },
      "source": [
        "# ====================================== retain_graph ==============================================\n",
        "if flag:\n",
        "  for i in range(2):\n",
        "    print('=================== {} ==================='.format(i))\n",
        "    w = torch.tensor([1.], requires_grad=True)\n",
        "    x = torch.tensor([2.], requires_grad=True)\n",
        "    print(w)\n",
        "    print(x)\n",
        "\n",
        "    a = torch.add(w, x)\n",
        "    b = torch.add(w, 1)\n",
        "    y = torch.mul(a, b)\n",
        "\n",
        "    y.backward(retain_graph=True)\n",
        "    print(w.grad)\n",
        "    print(x.grad)\n",
        "    print(y)\n",
        "    # y.backward()\n",
        "    # print(y)\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "=================== 0 ===================\n",
            "tensor([1.], requires_grad=True)\n",
            "tensor([2.], requires_grad=True)\n",
            "tensor([5.])\n",
            "tensor([2.])\n",
            "tensor([6.], grad_fn=<MulBackward0>)\n",
            "=================== 1 ===================\n",
            "tensor([1.], requires_grad=True)\n",
            "tensor([2.], requires_grad=True)\n",
            "tensor([5.])\n",
            "tensor([2.])\n",
            "tensor([6.], grad_fn=<MulBackward0>)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YE1yuFJShXf2",
        "colab_type": "text"
      },
      "source": [
        "## 2. grad_tensors\n",
        "\n",
        "- 当输出值y不是标量的时候，反向梯度求导，直接y.backward()会报错。\n",
        "- 解决方案：传入gradient参数，参数的类型和shape与输出值y一致。\n",
        "\n",
        "[pytorch的backward](https://www.cnblogs.com/wanghui-garcia/p/10616344.html)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GKpEKoe7fPQY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "outputId": "b5273a49-0024-4e83-ab43-0e816db0ea41"
      },
      "source": [
        "# ====================================== grad_tensors ==============================================\n",
        "if flag:\n",
        "    w = torch.tensor([1.], requires_grad=True)\n",
        "    x = torch.tensor([2.], requires_grad=True)\n",
        "\n",
        "    a = torch.add(w, x)     # retain_grad()\n",
        "    b = torch.add(w, 1)\n",
        "\n",
        "    y0 = torch.mul(a, b)    # y0 = (x+w) * (w+1)\n",
        "    y1 = torch.add(a, b)    # y1 = (x+w) + (w+1)    dy1/dw = 2\n",
        "\n",
        "    loss = torch.cat([y0, y1], dim=0) # [y0, y1]\n",
        "    print('loss:')\n",
        "    print(loss)\n",
        "    grad_tensors = torch.tensor([1., 2.])\n",
        "\n",
        "    print(w.grad) # 未做反向传播backward，w的梯度是None\n",
        "\n",
        "    # gradient传入torch.autograd.backward()中的grad_tensors\n",
        "    loss.backward(gradient=grad_tensors, retain_graph=True) \n",
        "\n",
        "    print(w.grad)\n",
        "\n",
        "    loss.backward(loss)\n",
        "    print(w.grad)\n",
        "    \n",
        "    # 特别注意的地方！看上方备注\n",
        "    loss.backward()\n",
        "    print(w.grad)\n",
        "\n",
        "\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "loss:\n",
            "tensor([6., 5.], grad_fn=<CatBackward>)\n",
            "None\n",
            "tensor([9.])\n",
            "tensor([49.])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-b7dcf305b658>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0;31m# 特别注意的地方！看上方备注\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m     \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph)\u001b[0m\n\u001b[1;32m    183\u001b[0m                 \u001b[0mproducts\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mDefaults\u001b[0m \u001b[0mto\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m         \"\"\"\n\u001b[0;32m--> 185\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mregister_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables)\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0mgrad_tensors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad_tensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m     \u001b[0mgrad_tensors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_make_grads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mretain_graph\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0mretain_graph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36m_make_grads\u001b[0;34m(outputs, grads)\u001b[0m\n\u001b[1;32m     45\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequires_grad\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"grad can be implicitly created only for scalar outputs\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m                 \u001b[0mnew_grads\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmemory_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreserve_format\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: grad can be implicitly created only for scalar outputs"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vdwq0Lsrhe_m",
        "colab_type": "text"
      },
      "source": [
        "## 3. autograd.gard"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FEGXzPq8geHM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "b8af0e9a-0e5f-446e-a4ed-004660b6c011"
      },
      "source": [
        "# ====================================== autograd.gard ==============================================\n",
        "if flag:\n",
        "\n",
        "    x = torch.tensor([3.], requires_grad=True)\n",
        "    y = torch.pow(x, 2)     # y = x**2\n",
        "\n",
        "    grad_1 = torch.autograd.grad(y, x, create_graph=True) # grad_1=dy/dx=2x=2*3=6\n",
        "    print(grad_1)\n",
        "\n",
        "    grad_2 = torch.autograd.grad(grad_1[0], x)    # grad_2=d(dy/dx)/dx=d(2x)/dx=2\n",
        "    print(grad_2)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(tensor([6.], grad_fn=<MulBackward0>),)\n",
            "(tensor([2.]),)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o585IirhyPoz",
        "colab_type": "text"
      },
      "source": [
        "- 当多次求梯度时，将y的定义写在循环内部就不需要设置retain_graph=True。\n",
        "- 当多次求梯度时，将y定义在循环体外就需要retain_graph=True，否则报错。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h7JhGsofgeKg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "f98a1bb0-0c23-4e3c-bc15-53c46b054d79"
      },
      "source": [
        "# ====================================== tips: 1 ==============================================\n",
        "\n",
        "print('等价方案1：')\n",
        "if flag:\n",
        "\n",
        "    w = torch.tensor([1.], requires_grad=True)\n",
        "    x = torch.tensor([2.], requires_grad=True)\n",
        "\n",
        "    for i in range(4):\n",
        "        a = torch.add(w, x)\n",
        "        b = torch.add(w, 1)\n",
        "        y = torch.mul(a, b)\n",
        "\n",
        "        y.backward()\n",
        "        print(w.grad)\n",
        "        # w.grad.zero_()\n",
        "\n",
        "print('等价方案2：')\n",
        "if flag:\n",
        "\n",
        "    w = torch.tensor([1.], requires_grad=True)\n",
        "    x = torch.tensor([2.], requires_grad=True)\n",
        "\n",
        "    a = torch.add(w, x)\n",
        "    b = torch.add(w, 1)\n",
        "    y = torch.mul(a, b)\n",
        "\n",
        "    for i in range(4):\n",
        "        y.backward(retain_graph=True)\n",
        "        print(w.grad)\n",
        "        # w.grad.zero_()\n",
        "\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "等价方案1：\n",
            "tensor([5.])\n",
            "tensor([10.])\n",
            "tensor([15.])\n",
            "tensor([20.])\n",
            "等价方案2：\n",
            "tensor([5.])\n",
            "tensor([10.])\n",
            "tensor([15.])\n",
            "tensor([20.])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_xVZ4HiNgrLq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6f0644ed-7cba-4d2f-ea13-064e9a03a8f0"
      },
      "source": [
        "# ====================================== tips: 2 ==============================================\n",
        "if flag:\n",
        "\n",
        "    w = torch.tensor([1.], requires_grad=True)\n",
        "    x = torch.tensor([2.], requires_grad=True)\n",
        "\n",
        "    a = torch.add(w, x)\n",
        "    b = torch.add(w, 1)\n",
        "    y = torch.mul(a, b)\n",
        "\n",
        "    print(a.requires_grad, b.requires_grad, y.requires_grad)\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True True True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rvj1tfcB2W6K",
        "colab_type": "text"
      },
      "source": [
        "[关于 pytorch inplace operation, 需要知道的几件事](https://zhuanlan.zhihu.com/p/38475183)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ceIIKkvwgrTz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 409
        },
        "outputId": "a407d2ec-9c02-4ab9-c127-e3c7a3dfaa82"
      },
      "source": [
        "# ====================================== tips: 3 ==============================================\n",
        "if flag:\n",
        "\n",
        "    a = torch.ones((1, ))\n",
        "    print(id(a), a)\n",
        "\n",
        "    a = a + torch.ones((1, ))\n",
        "    print(id(a), a)\n",
        "\n",
        "    a = torch.ones((1, ))\n",
        "    a += torch.ones((1, ))\n",
        "    print(id(a), a)\n",
        "\n",
        "\n",
        "\n",
        "if flag:\n",
        "\n",
        "    w = torch.tensor([1.], requires_grad=True)\n",
        "    x = torch.tensor([2.], requires_grad=True)\n",
        "\n",
        "    a = torch.add(w, x)\n",
        "    b = torch.add(w, 1)\n",
        "    y = torch.mul(a, b)\n",
        "    \n",
        "    print(w.grad)\n",
        "    print(w)\n",
        "    print(w.data)\n",
        "    print(w+1)\n",
        "    print(w.data+1)\n",
        "    # data不安全，会inplace掉，改用detach吧\n",
        "    print(w.data.add_(1))\n",
        "    print(w.is_leaf)\n",
        "    w.add_(1)\n",
        "    \"\"\"\n",
        "    autograd小贴士：\n",
        "        梯度不自动清零 \n",
        "        依赖于叶子结点的结点，requires_grad默认为True     \n",
        "        叶子结点不可执行in-place \n",
        "    \"\"\"\n",
        "    y.backward()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "139823187657208 tensor([1.])\n",
            "139823187657496 tensor([2.])\n",
            "139823188119696 tensor([2.])\n",
            "None\n",
            "tensor([1.], requires_grad=True)\n",
            "tensor([1.])\n",
            "tensor([2.], grad_fn=<AddBackward0>)\n",
            "tensor([2.])\n",
            "tensor([2.])\n",
            "True\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-7537941f9ff6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_leaf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m     \u001b[0mw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m     \"\"\"\n\u001b[1;32m     35\u001b[0m     \u001b[0mautograd小贴士\u001b[0m\u001b[0;31m：\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: a leaf Variable that requires grad is being used in an in-place operation."
          ]
        }
      ]
    }
  ]
}